
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.JPanel;


public class Interfaz extends javax.swing.JFrame implements MouseListener{

    private int size = 20;
    private JPanel[][] pnlChessCells = new JPanel[size][size];
    private Container container;
    public Interfaz() {
        initComponents();
        Tablero.setLayout(new GridLayout(size,size));
        container = getContentPane();
        container.setLayout(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("Intelligent Agents");
        //setResizable(false);
        //Tablero.setBackground(new Color(255, 255, 255));
        container.add(Tablero);
        this.drawBoard();
        //this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
        setVisible(true);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Controles = new javax.swing.JPanel();
        Ambiente = new javax.swing.JPanel();
        Tablero = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Controles.setBorder(javax.swing.BorderFactory.createTitledBorder("Controles"));

        javax.swing.GroupLayout ControlesLayout = new javax.swing.GroupLayout(Controles);
        Controles.setLayout(ControlesLayout);
        ControlesLayout.setHorizontalGroup(
            ControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        ControlesLayout.setVerticalGroup(
            ControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 538, Short.MAX_VALUE)
        );

        Ambiente.setBorder(javax.swing.BorderFactory.createTitledBorder("Ambiente"));

        Tablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Tablero.setFocusable(false);

        javax.swing.GroupLayout TableroLayout = new javax.swing.GroupLayout(Tablero);
        Tablero.setLayout(TableroLayout);
        TableroLayout.setHorizontalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );
        TableroLayout.setVerticalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 523, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout AmbienteLayout = new javax.swing.GroupLayout(Ambiente);
        Ambiente.setLayout(AmbienteLayout);
        AmbienteLayout.setHorizontalGroup(
            AmbienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AmbienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        AmbienteLayout.setVerticalGroup(
            AmbienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AmbienteLayout.createSequentialGroup()
                .addComponent(Tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Controles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Ambiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Controles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Ambiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Ambiente;
    private javax.swing.JPanel Controles;
    private javax.swing.JPanel Tablero;
    // End of variables declaration//GEN-END:variables

    public void mouseEntered(MouseEvent e){}
    public void mouseReleased(MouseEvent e){}
    public void mouseExited(MouseEvent e){}
    public void mousePressed(MouseEvent e){}
    public void mouseClicked(MouseEvent e) {}

    private void drawBoard() {
        for (int y = 0; y < size; y++)
        {
            for (int x = 0; x < size; x++)
            {
                pnlChessCells[y][x] = new JPanel(new BorderLayout());
                pnlChessCells[y][x].addMouseListener(this);
                Tablero.add(pnlChessCells[y][x]);                
                if (y % 2 == 0){
                      if (x % 2 != 0)
                            pnlChessCells[y][x].setBackground(Color.DARK_GRAY);
                      else
                            pnlChessCells[y][x].setBackground(Color.WHITE);
                }
                else{
                      if (x % 2 == 0)
                            pnlChessCells[y][x].setBackground(Color.DARK_GRAY);
                      else
                            pnlChessCells[y][x].setBackground(Color.WHITE);
                }
                
            }
        }
        //pnlChessCells[5][5].setBackground(Color.DARK_GRAY);

    }
}
